# typed: strict
# frozen_string_literal: true

# Code generated by protoc-gen-rbi. DO NOT EDIT.




class ::EmptyValidators
  extend T::Sig
  include Validation
  include 


  include T::Props::Serializable
  include T::Struct::ActsAsComparable


  sig {
      returns(T::Array[MessageValidator[::Empty]])
  }
  def all_model_validators
    [

    ]
  end
end



class ::SimpleValidators
  extend T::Sig
  include Validation
  include 


  include T::Props::Serializable
  include T::Struct::ActsAsComparable

  sig {
    returns ValidatableField[::Simple, T.nilable(String)]
  }
  def int32_field
    ValidatableField.new(
      translation: "<nil>",
      getter: ->(message) { message.int32_field },
      setter: ->(message, field) { message.int32_field = field },
      validators: [
        Validation::Required.new,
        
      ]
    )
  end


  sig {
      returns(T::Array[MessageValidator[::Simple]])
  }
  def all_model_validators
    [
        int32_field.message_validator,

    ]
  end
end



class ::FooValidators
  extend T::Sig
  include Validation
  include 


  include T::Props::Serializable
  include T::Struct::ActsAsComparable

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def required_simple
    ValidatableField.new(
      translation: "<nil>",
      getter: ->(message) { message.required_simple },
      setter: ->(message, field) { message.required_simple = field },
      validators: [
        Validation::ValidateSubMessage.new(SimpleValidators.new.all_model_validators),
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def maybe_simple
    ValidatableField.new(
      translation: "<nil>",
      getter: ->(message) { message.maybe_simple },
      setter: ->(message, field) { message.maybe_simple = field },
      validators: [
        Validation::Required.new,
        Validation::ValidateSubMessageIfPresent.new(SimpleValidators.new.all_model_validators),
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def not_required_maybe_simple
    ValidatableField.new(
      translation: "<nil>",
      getter: ->(message) { message.not_required_maybe_simple },
      setter: ->(message, field) { message.not_required_maybe_simple = field },
      validators: [
        Validation::ValidateSubMessageIfPresent.new(SimpleValidators.new.all_model_validators),
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def required_nested_simple
    ValidatableField.new(
      translation: "<nil>",
      getter: ->(message) { message.required_nested_simple },
      setter: ->(message, field) { message.required_nested_simple = field },
      validators: [
        Validation::ValidateSubMessage.new(FooNestedSimpleValidators.new.all_model_validators),
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def maybe_nested_simple
    ValidatableField.new(
      translation: "<nil>",
      getter: ->(message) { message.maybe_nested_simple },
      setter: ->(message, field) { message.maybe_nested_simple = field },
      validators: [
        Validation::Required.new,
        Validation::ValidateSubMessageIfPresent.new(FooNestedSimpleValidators.new.all_model_validators),
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def not_required_maybe_nested_simple
    ValidatableField.new(
      translation: "<nil>",
      getter: ->(message) { message.not_required_maybe_nested_simple },
      setter: ->(message, field) { message.not_required_maybe_nested_simple = field },
      validators: [
        Validation::ValidateSubMessageIfPresent.new(FooNestedSimpleValidators.new.all_model_validators),
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def required_int
    ValidatableField.new(
      translation: "<nil>",
      getter: ->(message) { message.required_int },
      setter: ->(message, field) { message.required_int = field },
      validators: [
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def maybe_int
    ValidatableField.new(
      translation: "<nil>",
      getter: ->(message) { message.maybe_int },
      setter: ->(message, field) { message.maybe_int = field },
      validators: [
        Validation::Required.new,
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def not_required_maybe_int
    ValidatableField.new(
      translation: "<nil>",
      getter: ->(message) { message.not_required_maybe_int },
      setter: ->(message, field) { message.not_required_maybe_int = field },
      validators: [
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def required_bool
    ValidatableField.new(
      translation: "<nil>",
      getter: ->(message) { message.required_bool },
      setter: ->(message, field) { message.required_bool = field },
      validators: [
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def maybe_bool
    ValidatableField.new(
      translation: "<nil>",
      getter: ->(message) { message.maybe_bool },
      setter: ->(message, field) { message.maybe_bool = field },
      validators: [
        Validation::Required.new,
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def required_enum
    ValidatableField.new(
      translation: "<nil>",
      getter: ->(message) { message.required_enum },
      setter: ->(message, field) { message.required_enum = field },
      validators: [
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def maybe_enum
    ValidatableField.new(
      translation: "<nil>",
      getter: ->(message) { message.maybe_enum },
      setter: ->(message, field) { message.maybe_enum = field },
      validators: [
        Validation::Required.new,
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def maybe_string_relevant_if_required_bool
    ValidatableField.new(
      translation: "<nil>",
      getter: ->(message) { message.maybe_string_relevant_if_required_bool },
      setter: ->(message, field) { message.maybe_string_relevant_if_required_bool = field },
      validators: [
        Validation::RelevantIfFieldTrue.new( ->(m) { m.required_bool}),
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def maybe_string_relevant_if_maybe_bool
    ValidatableField.new(
      translation: "<nil>",
      getter: ->(message) { message.maybe_string_relevant_if_maybe_bool },
      setter: ->(message, field) { message.maybe_string_relevant_if_maybe_bool = field },
      validators: [
        Validation::RelevantIfMaybeFieldTrue.new( ->(m) { m.maybe_bool}),
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def required_string_with_custom_validator
    ValidatableField.new(
      translation: "<nil>",
      getter: ->(message) { message.required_string_with_custom_validator },
      setter: ->(message, field) { message.required_string_with_custom_validator = field },
      validators: [
        Validation::RequiredStringCustomValidator.new,
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def maybe_string_with_custom_validator
    ValidatableField.new(
      translation: "<nil>",
      getter: ->(message) { message.maybe_string_with_custom_validator },
      setter: ->(message, field) { message.maybe_string_with_custom_validator = field },
      validators: [
        Validation::Required.new,
        Validation::RequiredMaybeStringCustomValidator.new,
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def repeated_string_custom_validator
    ValidatableField.new(
      translation: "<nil>",
      getter: ->(message) { message.repeated_string_custom_validator },
      setter: ->(message, field) { message.repeated_string_custom_validator = field },
      validators: [
        Validation::RepeatedStringCustomValidator.new,
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def oneof
    ValidatableField.new(
      translation: "<nil>",
      getter: ->(message) { message.oneof },
      setter: ->(message, field) { message.oneof = field },
      validators: [
        Validation::OneofFieldValidator.new,
        ]
    )
  end


  sig {
      returns(T::Array[MessageValidator[::Foo]])
  }
  def all_model_validators
    [
        required_simple.message_validator,
        maybe_simple.message_validator,
        not_required_maybe_simple.message_validator,
        required_nested_simple.message_validator,
        maybe_nested_simple.message_validator,
        not_required_maybe_nested_simple.message_validator,
        required_int.message_validator,
        maybe_int.message_validator,
        not_required_maybe_int.message_validator,
        required_bool.message_validator,
        maybe_bool.message_validator,
        required_enum.message_validator,
        maybe_enum.message_validator,
        maybe_string_relevant_if_required_bool.message_validator,
        maybe_string_relevant_if_maybe_bool.message_validator,
        required_string_with_custom_validator.message_validator,
        maybe_string_with_custom_validator.message_validator,
        repeated_string_custom_validator.message_validator,

        oneof.message_validator,
    ]
  end
end



class ::Foo::NestedSimpleValidators
  extend T::Sig
  include Validation
  include 


  include T::Props::Serializable
  include T::Struct::ActsAsComparable

  sig {
    returns ValidatableField[::Foo::NestedSimple, T.nilable(String)]
  }
  def optional_nested_int
    ValidatableField.new(
      translation: "<nil>",
      getter: ->(message) { message.optional_nested_int },
      setter: ->(message, field) { message.optional_nested_int = field },
      validators: [
        Validation::Required.new,
        
      ]
    )
  end


  sig {
      returns(T::Array[MessageValidator[::Foo::NestedSimple]])
  }
  def all_model_validators
    [
        optional_nested_int.message_validator,

    ]
  end
end

