# typed: strict
# frozen_string_literal: true

# Code generated by protoc-gen-rbi. DO NOT EDIT.




class ::EmptyValidators
  extend T::Sig
  include Validation


  include T::Props::Serializable
  include T::Struct::ActsAsComparable


  sig {
      returns(T::Array[[String, MessageValidator[::Empty]]])
  }
  def all_model_validators
    [

    ]
  end
end



class ::SimpleValidators
  extend T::Sig
  include Validation


  include T::Props::Serializable
  include T::Struct::ActsAsComparable

  sig {
    returns ValidatableField[::Simple, T.nilable(String)]
  }
  def int32_field
    ValidatableField.new(
      label: "Int 32 Field",
      getter: ->(message) { message.int32_field },
      setter: ->(message, field) { message.int32_field = field },
      validators: [
        Required.new,
        
      ]
    )
  end


  sig {
      returns(T::Array[[String, MessageValidator[::Simple]]])
  }
  def all_model_validators
    [
        ["Int 32 Field", int32_field.message_validator],

    ]
  end
end



class ::FooValidators
  extend T::Sig
  include Validation


  include T::Props::Serializable
  include T::Struct::ActsAsComparable

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def required_simple
    ValidatableField.new(
      label: "Required Simple",
      getter: ->(message) { message.required_simple },
      setter: ->(message, field) { message.required_simple = field },
      validators: [
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def maybe_simple
    ValidatableField.new(
      label: "Maybe Simple",
      getter: ->(message) { message.maybe_simple },
      setter: ->(message, field) { message.maybe_simple = field },
      validators: [
        Required.new,
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def not_required_maybe_simple
    ValidatableField.new(
      label: "Not Required Maybe Simple",
      getter: ->(message) { message.not_required_maybe_simple },
      setter: ->(message, field) { message.not_required_maybe_simple = field },
      validators: [
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def required_nested_simple
    ValidatableField.new(
      label: "Required Nested Simple",
      getter: ->(message) { message.required_nested_simple },
      setter: ->(message, field) { message.required_nested_simple = field },
      validators: [
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def maybe_nested_simple
    ValidatableField.new(
      label: "Maybe Nested Simple",
      getter: ->(message) { message.maybe_nested_simple },
      setter: ->(message, field) { message.maybe_nested_simple = field },
      validators: [
        Required.new,
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def not_required_maybe_nested_simple
    ValidatableField.new(
      label: "Not Required Maybe Nested Simple",
      getter: ->(message) { message.not_required_maybe_nested_simple },
      setter: ->(message, field) { message.not_required_maybe_nested_simple = field },
      validators: [
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def required_int
    ValidatableField.new(
      label: "Required Int",
      getter: ->(message) { message.required_int },
      setter: ->(message, field) { message.required_int = field },
      validators: [
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def maybe_int
    ValidatableField.new(
      label: "Maybe Int",
      getter: ->(message) { message.maybe_int },
      setter: ->(message, field) { message.maybe_int = field },
      validators: [
        Required.new,
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def not_required_maybe_int
    ValidatableField.new(
      label: "Not Required Maybe Int",
      getter: ->(message) { message.not_required_maybe_int },
      setter: ->(message, field) { message.not_required_maybe_int = field },
      validators: [
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def required_bool
    ValidatableField.new(
      label: "Required Bool",
      getter: ->(message) { message.required_bool },
      setter: ->(message, field) { message.required_bool = field },
      validators: [
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def maybe_bool
    ValidatableField.new(
      label: "Maybe Bool",
      getter: ->(message) { message.maybe_bool },
      setter: ->(message, field) { message.maybe_bool = field },
      validators: [
        Required.new,
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def required_enum
    ValidatableField.new(
      label: "Required Enum",
      getter: ->(message) { message.required_enum },
      setter: ->(message, field) { message.required_enum = field },
      validators: [
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def maybe_enum
    ValidatableField.new(
      label: "Maybe Enum",
      getter: ->(message) { message.maybe_enum },
      setter: ->(message, field) { message.maybe_enum = field },
      validators: [
        Required.new,
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def maybe_string_relevant_if_required_bool
    ValidatableField.new(
      label: "Maybe String Relevant If Required Bool",
      getter: ->(message) { message.maybe_string_relevant_if_required_bool },
      setter: ->(message, field) { message.maybe_string_relevant_if_required_bool = field },
      validators: [
        RelevantIfFieldTrue( ->(m) { m.required_bool}).new,
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def maybe_string_relevant_if_maybe_bool
    ValidatableField.new(
      label: "Maybe String Relevant If Maybe Bool",
      getter: ->(message) { message.maybe_string_relevant_if_maybe_bool },
      setter: ->(message, field) { message.maybe_string_relevant_if_maybe_bool = field },
      validators: [
        RelevantIfMaybeFieldTrue( ->(m) { m.maybe_bool}).new,
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def required_string_with_custom_validator
    ValidatableField.new(
      label: "Required String With Custom Validator",
      getter: ->(message) { message.required_string_with_custom_validator },
      setter: ->(message, field) { message.required_string_with_custom_validator = field },
      validators: [
        RequiredStringCustomValidator.new,
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def maybe_string_with_custom_validator
    ValidatableField.new(
      label: "Maybe String With Custom Validator",
      getter: ->(message) { message.maybe_string_with_custom_validator },
      setter: ->(message, field) { message.maybe_string_with_custom_validator = field },
      validators: [
        Required.new,
        RequiredMaybeStringCustomValidator.new,
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def repeated_string_custom_validator
    ValidatableField.new(
      label: "Repeated String Custom Validator",
      getter: ->(message) { message.repeated_string_custom_validator },
      setter: ->(message, field) { message.repeated_string_custom_validator = field },
      validators: [
        RepeatedStringCustomValidator.new,
        
      ]
    )
  end

  sig {
    returns ValidatableField[::Foo, T.nilable(String)]
  }
  def oneof
    ValidatableField.new(
      label: "Oneof",
      getter: ->(message) { message.oneof },
      setter: ->(message, field) { message.oneof = field },
      validators: [
        OneofFieldValidator.new,
        ]
    )
  end


  sig {
      returns(T::Array[[String, MessageValidator[::Foo]]])
  }
  def all_model_validators
    [
        ["Required Simple", required_simple.message_validator],
        ["Maybe Simple", maybe_simple.message_validator],
        ["Not Required Maybe Simple", not_required_maybe_simple.message_validator],
        ["Required Nested Simple", required_nested_simple.message_validator],
        ["Maybe Nested Simple", maybe_nested_simple.message_validator],
        ["Not Required Maybe Nested Simple", not_required_maybe_nested_simple.message_validator],
        ["Required Int", required_int.message_validator],
        ["Maybe Int", maybe_int.message_validator],
        ["Not Required Maybe Int", not_required_maybe_int.message_validator],
        ["Required Bool", required_bool.message_validator],
        ["Maybe Bool", maybe_bool.message_validator],
        ["Required Enum", required_enum.message_validator],
        ["Maybe Enum", maybe_enum.message_validator],
        ["Maybe String Relevant If Required Bool", maybe_string_relevant_if_required_bool.message_validator],
        ["Maybe String Relevant If Maybe Bool", maybe_string_relevant_if_maybe_bool.message_validator],
        ["Required String With Custom Validator", required_string_with_custom_validator.message_validator],
        ["Maybe String With Custom Validator", maybe_string_with_custom_validator.message_validator],
        ["Repeated String Custom Validator", repeated_string_custom_validator.message_validator],

        ["Oneof", oneof.message_validator],
    ]
  end
end



class ::Foo::NestedSimpleValidators
  extend T::Sig
  include Validation


  include T::Props::Serializable
  include T::Struct::ActsAsComparable

  sig {
    returns ValidatableField[::Foo::NestedSimple, T.nilable(String)]
  }
  def optional_nested_int
    ValidatableField.new(
      label: "Optional Nested Int",
      getter: ->(message) { message.optional_nested_int },
      setter: ->(message, field) { message.optional_nested_int = field },
      validators: [
        Required.new,
        
      ]
    )
  end


  sig {
      returns(T::Array[[String, MessageValidator[::Foo::NestedSimple]]])
  }
  def all_model_validators
    [
        ["Optional Nested Int", optional_nested_int.message_validator],

    ]
  end
end

