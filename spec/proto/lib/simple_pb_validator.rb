# typed: strict
# frozen_string_literal: true

# Code generated by protoc-gen-rbi. DO NOT EDIT.

module SimplePbValidator



    class EmptyValidators
      extend T::Sig
      include Validation
      include SimplePb


      include T::Props::Serializable
      include T::Struct::ActsAsComparable
    

      sig {
          returns(T::Array[Validator[SimplePb::Empty]])
      }
      def self.all_validators
        [
    
        ]
      end
    end



    class SimpleValidators
      extend T::Sig
      include Validation
      include SimplePb


      include T::Props::Serializable
      include T::Struct::ActsAsComparable
    
      sig {
        returns ValidatableField[SimplePb::Simple, T.nilable(String)]
      }
      def self.int32_field
        ValidatableField.new(
          translation: TranslationId.new("<missing translation id>"),
          getter: ->(message) { message.int32_field },
          setter: ->(message, field) { message.int32_field = field },
          validator: Validation::AlwaysPresent.new( TranslationId.new("<missing translation id>"),  ( ->(m) { m.int32_field} ), ([])),
        )
      end
    

      sig {
          returns(T::Array[Validator[SimplePb::Simple]])
      }
      def self.all_validators
        [
            int32_field.validator,
    
        ]
      end
    end



    class FooValidators
      extend T::Sig
      include Validation
      include SimplePb


      include T::Props::Serializable
      include T::Struct::ActsAsComparable
    
      sig {
        returns ValidatableField[SimplePb::Foo, T.nilable(String)]
      }
      def self.s
        ValidatableField.new(
          translation: TranslationId.new("<missing translation id>"),
          getter: ->(message) { message.s },
          setter: ->(message, field) { message.s = field },
          validator: Validation::AlwaysPresent.new( TranslationId.new("<missing translation id>"),  ( ->(m) { m.s} ), (SimpleValidators.all_validators)),
        )
      end
    
      sig {
        returns ValidatableField[SimplePb::Foo, T.nilable(String)]
      }
      def self.ss
        ValidatableField.new(
          translation: TranslationId.new("<missing translation id>"),
          getter: ->(message) { message.ss },
          setter: ->(message, field) { message.ss = field },
          validator: Validation::RequiredList.new( TranslationId.new("<missing translation id>"),  ( ->(m) { m.ss} ), (SimpleValidators.all_validators)),
        )
      end
    
      sig {
        returns ValidatableField[SimplePb::Foo, T.nilable(String)]
      }
      def self.optional_s
        ValidatableField.new(
          translation: TranslationId.new("<missing translation id>"),
          getter: ->(message) { message.optional_s },
          setter: ->(message, field) { message.optional_s = field },
          validator: Validation::Required.new( TranslationId.new("<missing translation id>"),  ( ->(m) { m.optional_s} ), (SimpleValidators.all_validators)),
        )
      end
    
      sig {
        returns ValidatableField[SimplePb::Foo, T.nilable(String)]
      }
      def self.colour
        ValidatableField.new(
          translation: TranslationId.new("<missing translation id>"),
          getter: ->(message) { message.colour },
          setter: ->(message, field) { message.colour = field },
          validator: Validation::AlwaysPresent.new( TranslationId.new("<missing translation id>"),  ( ->(m) { m.colour} ), ([])),
        )
      end
    
      sig {
        returns ValidatableField[SimplePb::Foo, T.nilable(String)]
      }
      def self.colours
        ValidatableField.new(
          translation: TranslationId.new("<missing translation id>"),
          getter: ->(message) { message.colours },
          setter: ->(message, field) { message.colours = field },
          validator: Validation::RequiredList.new( TranslationId.new("<missing translation id>"),  ( ->(m) { m.colours} ), ([])),
        )
      end
    
      sig {
        returns ValidatableField[SimplePb::Foo, T.nilable(String)]
      }
      def self.optional_colour
        ValidatableField.new(
          translation: TranslationId.new("<missing translation id>"),
          getter: ->(message) { message.optional_colour },
          setter: ->(message, field) { message.optional_colour = field },
          validator: Validation::Required.new( TranslationId.new("<missing translation id>"),  ( ->(m) { m.optional_colour} ), ([])),
        )
      end
    
      sig {
        returns ValidatableField[SimplePb::Foo, T.nilable(String)]
      }
      def self.int_field
        ValidatableField.new(
          translation: TranslationId.new("<missing translation id>"),
          getter: ->(message) { message.int_field },
          setter: ->(message, field) { message.int_field = field },
          validator: Validation::AlwaysPresent.new( TranslationId.new("<missing translation id>"),  ( ->(m) { m.int_field} ), ([])),
        )
      end
    
      sig {
        returns ValidatableField[SimplePb::Foo, T.nilable(String)]
      }
      def self.int_fields
        ValidatableField.new(
          translation: TranslationId.new("<missing translation id>"),
          getter: ->(message) { message.int_fields },
          setter: ->(message, field) { message.int_fields = field },
          validator: Validation::RequiredList.new( TranslationId.new("<missing translation id>"),  ( ->(m) { m.int_fields} ), ([])),
        )
      end
    
      sig {
        returns ValidatableField[SimplePb::Foo, T.nilable(String)]
      }
      def self.optional_int_field
        ValidatableField.new(
          translation: TranslationId.new("<missing translation id>"),
          getter: ->(message) { message.optional_int_field },
          setter: ->(message, field) { message.optional_int_field = field },
          validator: Validation::Required.new( TranslationId.new("<missing translation id>"),  ( ->(m) { m.optional_int_field} ), ([])),
        )
      end
    
      sig {
        returns ValidatableField[SimplePb::Foo, T.nilable(String)]
      }
      def self.int64_field
        ValidatableField.new(
          translation: TranslationId.new("<missing translation id>"),
          getter: ->(message) { message.int64_field },
          setter: ->(message, field) { message.int64_field = field },
          validator: Validation::AlwaysPresent.new( TranslationId.new("<missing translation id>"),  ( ->(m) { m.int64_field} ), ([])),
        )
      end
    
      sig {
        returns ValidatableField[SimplePb::Foo, T.nilable(String)]
      }
      def self.int64_fields
        ValidatableField.new(
          translation: TranslationId.new("<missing translation id>"),
          getter: ->(message) { message.int64_fields },
          setter: ->(message, field) { message.int64_fields = field },
          validator: Validation::RequiredList.new( TranslationId.new("<missing translation id>"),  ( ->(m) { m.int64_fields} ), ([])),
        )
      end
    
      sig {
        returns ValidatableField[SimplePb::Foo, T.nilable(String)]
      }
      def self.optional_int64_field
        ValidatableField.new(
          translation: TranslationId.new("<missing translation id>"),
          getter: ->(message) { message.optional_int64_field },
          setter: ->(message, field) { message.optional_int64_field = field },
          validator: Validation::Required.new( TranslationId.new("<missing translation id>"),  ( ->(m) { m.optional_int64_field} ), ([])),
        )
      end
    
      sig {
        returns ValidatableField[SimplePb::Foo, T.nilable(String)]
      }
      def self.timestamp_field
        ValidatableField.new(
          translation: TranslationId.new("<missing translation id>"),
          getter: ->(message) { message.timestamp_field },
          setter: ->(message, field) { message.timestamp_field = field },
          validator: Validation::AlwaysPresent.new( TranslationId.new("<missing translation id>"),  ( ->(m) { m.timestamp_field} ), ([])),
        )
      end
    
      sig {
        returns ValidatableField[SimplePb::Foo, T.nilable(String)]
      }
      def self.timestamp_fields
        ValidatableField.new(
          translation: TranslationId.new("<missing translation id>"),
          getter: ->(message) { message.timestamp_fields },
          setter: ->(message, field) { message.timestamp_fields = field },
          validator: Validation::RequiredList.new( TranslationId.new("<missing translation id>"),  ( ->(m) { m.timestamp_fields} ), ([])),
        )
      end
    
      sig {
        returns ValidatableField[SimplePb::Foo, T.nilable(String)]
      }
      def self.optional_timestamp_field
        ValidatableField.new(
          translation: TranslationId.new("<missing translation id>"),
          getter: ->(message) { message.optional_timestamp_field },
          setter: ->(message, field) { message.optional_timestamp_field = field },
          validator: Validation::Required.new( TranslationId.new("<missing translation id>"),  ( ->(m) { m.optional_timestamp_field} ), ([])),
        )
      end
    
      sig {
        returns ValidatableField[SimplePb::Foo, T.nilable(String)]
      }
      def self.oo
        ValidatableField.new(
          translation: TranslationId.new("<missing translation id>"),
          getter: ->(message) { message.oo },
          setter: ->(message, field) { message.oo = field },
          validator: Validation::AlwaysPresent.new( TranslationId.new("<missing translation id>"),  ( ->(m) { m.oo} ), ([])),
        )
      end
    

      sig {
          returns(T::Array[Validator[SimplePb::Foo]])
      }
      def self.all_validators
        [
            s.validator,
            ss.validator,
            optional_s.validator,
            colour.validator,
            colours.validator,
            optional_colour.validator,
            int_field.validator,
            int_fields.validator,
            optional_int_field.validator,
            int64_field.validator,
            int64_fields.validator,
            optional_int64_field.validator,
            timestamp_field.validator,
            timestamp_fields.validator,
            optional_timestamp_field.validator,
    
            oo.validator,
        ]
      end
    end

end
