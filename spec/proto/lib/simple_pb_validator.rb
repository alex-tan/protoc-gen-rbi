# typed: strict
# frozen_string_literal: true

# Code generated by protoc-gen-rbi. DO NOT EDIT.




class SimplePb::EmptyValidators
  extend T::Sig
  include Validation


  include T::Props::Serializable
  include T::Struct::ActsAsComparable


  sig {
      returns(T::Array[[String, MessageValidator[SimplePb::Empty]]])
  }
  def all_model_validators
    [

    ]
  end
end



class SimplePb::SimpleValidators
  extend T::Sig
  include Validation


  include T::Props::Serializable
  include T::Struct::ActsAsComparable

  sig {
    returns ValidatableField[SimplePb::Simple, T.nilable(String)]
  }
  def int32_field
    ValidatableField.new(
      label: "Int 32 Field",
      getter: ->(message) { message.int32_field },
      setter: ->(message, field) { message.int32_field = field },
      validators: [
        
      ]
    )
  end


  sig {
      returns(T::Array[[String, MessageValidator[SimplePb::Simple]]])
  }
  def all_model_validators
    [
        ["Int 32 Field", int32_field.message_validator],

    ]
  end
end



class SimplePb::FooValidators
  extend T::Sig
  include Validation


  include T::Props::Serializable
  include T::Struct::ActsAsComparable

  sig {
    returns ValidatableField[SimplePb::Foo, T.nilable(String)]
  }
  def s
    ValidatableField.new(
      label: "S",
      getter: ->(message) { message.s },
      setter: ->(message, field) { message.s = field },
      validators: [
        
      ]
    )
  end

  sig {
    returns ValidatableField[SimplePb::Foo, T.nilable(String)]
  }
  def ss
    ValidatableField.new(
      label: "Ss",
      getter: ->(message) { message.ss },
      setter: ->(message, field) { message.ss = field },
      validators: [
        
      ]
    )
  end

  sig {
    returns ValidatableField[SimplePb::Foo, T.nilable(String)]
  }
  def optional_s
    ValidatableField.new(
      label: "Optional S",
      getter: ->(message) { message.optional_s },
      setter: ->(message, field) { message.optional_s = field },
      validators: [
        Required.new,
        
      ]
    )
  end

  sig {
    returns ValidatableField[SimplePb::Foo, T.nilable(String)]
  }
  def colour
    ValidatableField.new(
      label: "Colour",
      getter: ->(message) { message.colour },
      setter: ->(message, field) { message.colour = field },
      validators: [
        
      ]
    )
  end

  sig {
    returns ValidatableField[SimplePb::Foo, T.nilable(String)]
  }
  def colours
    ValidatableField.new(
      label: "Colours",
      getter: ->(message) { message.colours },
      setter: ->(message, field) { message.colours = field },
      validators: [
        
      ]
    )
  end

  sig {
    returns ValidatableField[SimplePb::Foo, T.nilable(String)]
  }
  def optional_colour
    ValidatableField.new(
      label: "Optional Colour",
      getter: ->(message) { message.optional_colour },
      setter: ->(message, field) { message.optional_colour = field },
      validators: [
        Required.new,
        
      ]
    )
  end

  sig {
    returns ValidatableField[SimplePb::Foo, T.nilable(String)]
  }
  def int_field
    ValidatableField.new(
      label: "Int Field",
      getter: ->(message) { message.int_field },
      setter: ->(message, field) { message.int_field = field },
      validators: [
        
      ]
    )
  end

  sig {
    returns ValidatableField[SimplePb::Foo, T.nilable(String)]
  }
  def int_fields
    ValidatableField.new(
      label: "Int Fields",
      getter: ->(message) { message.int_fields },
      setter: ->(message, field) { message.int_fields = field },
      validators: [
        
      ]
    )
  end

  sig {
    returns ValidatableField[SimplePb::Foo, T.nilable(String)]
  }
  def optional_int_field
    ValidatableField.new(
      label: "Optional Int Field",
      getter: ->(message) { message.optional_int_field },
      setter: ->(message, field) { message.optional_int_field = field },
      validators: [
        Required.new,
        
      ]
    )
  end

  sig {
    returns ValidatableField[SimplePb::Foo, T.nilable(String)]
  }
  def int64_field
    ValidatableField.new(
      label: "Int 64 Field",
      getter: ->(message) { message.int64_field },
      setter: ->(message, field) { message.int64_field = field },
      validators: [
        
      ]
    )
  end

  sig {
    returns ValidatableField[SimplePb::Foo, T.nilable(String)]
  }
  def int64_fields
    ValidatableField.new(
      label: "Int 64 Fields",
      getter: ->(message) { message.int64_fields },
      setter: ->(message, field) { message.int64_fields = field },
      validators: [
        
      ]
    )
  end

  sig {
    returns ValidatableField[SimplePb::Foo, T.nilable(String)]
  }
  def optional_int64_field
    ValidatableField.new(
      label: "Optional Int 64 Field",
      getter: ->(message) { message.optional_int64_field },
      setter: ->(message, field) { message.optional_int64_field = field },
      validators: [
        Required.new,
        
      ]
    )
  end

  sig {
    returns ValidatableField[SimplePb::Foo, T.nilable(String)]
  }
  def timestamp_field
    ValidatableField.new(
      label: "Timestamp Field",
      getter: ->(message) { message.timestamp_field },
      setter: ->(message, field) { message.timestamp_field = field },
      validators: [
        
      ]
    )
  end

  sig {
    returns ValidatableField[SimplePb::Foo, T.nilable(String)]
  }
  def timestamp_fields
    ValidatableField.new(
      label: "Timestamp Fields",
      getter: ->(message) { message.timestamp_fields },
      setter: ->(message, field) { message.timestamp_fields = field },
      validators: [
        
      ]
    )
  end

  sig {
    returns ValidatableField[SimplePb::Foo, T.nilable(String)]
  }
  def optional_timestamp_field
    ValidatableField.new(
      label: "Optional Timestamp Field",
      getter: ->(message) { message.optional_timestamp_field },
      setter: ->(message, field) { message.optional_timestamp_field = field },
      validators: [
        Required.new,
        
      ]
    )
  end

  sig {
    returns ValidatableField[SimplePb::Foo, T.nilable(String)]
  }
  def oo
    ValidatableField.new(
      label: "Oo",
      getter: ->(message) { message.oo },
      setter: ->(message, field) { message.oo = field },
      validators: [
        ]
    )
  end


  sig {
      returns(T::Array[[String, MessageValidator[SimplePb::Foo]]])
  }
  def all_model_validators
    [
        ["S", s.message_validator],
        ["Ss", ss.message_validator],
        ["Optional S", optional_s.message_validator],
        ["Colour", colour.message_validator],
        ["Colours", colours.message_validator],
        ["Optional Colour", optional_colour.message_validator],
        ["Int Field", int_field.message_validator],
        ["Int Fields", int_fields.message_validator],
        ["Optional Int Field", optional_int_field.message_validator],
        ["Int 64 Field", int64_field.message_validator],
        ["Int 64 Fields", int64_fields.message_validator],
        ["Optional Int 64 Field", optional_int64_field.message_validator],
        ["Timestamp Field", timestamp_field.message_validator],
        ["Timestamp Fields", timestamp_fields.message_validator],
        ["Optional Timestamp Field", optional_timestamp_field.message_validator],

        ["Oo", oo.message_validator],
    ]
  end
end

